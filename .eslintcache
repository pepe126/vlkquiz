[{"/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/index.js":"1","/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/reportWebVitals.js":"2","/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/App.js":"3","/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/components/Startupbtn.js":"4","/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/pages/Home.js":"5","/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/pages/Istruzioni.js":"6","/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/pages/Game.js":"7","/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/components/Infographic.js":"8","/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/pages/LostPage.js":"9","/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/pages/WinPage.js":"10"},{"size":442,"mtime":1607105608297,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1606857631975,"results":"13","hashOfConfig":"12"},{"size":840,"mtime":1607160266598,"results":"14","hashOfConfig":"12"},{"size":582,"mtime":1607161969559,"results":"15","hashOfConfig":"12"},{"size":165,"mtime":1607985413657,"results":"16","hashOfConfig":"12"},{"size":792,"mtime":1607160797967,"results":"17","hashOfConfig":"12"},{"size":4686,"mtime":1607983886324,"results":"18","hashOfConfig":"12"},{"size":197,"mtime":1607104341916,"results":"19","hashOfConfig":"12"},{"size":342,"mtime":1607161218863,"results":"20","hashOfConfig":"12"},{"size":337,"mtime":1607161384628,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1ecgcj8",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/index.js",[],["46","47"],"/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/reportWebVitals.js",[],"/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/App.js",["48","49"],"import './styles/App.css';\nimport {Route, BrowserRouter as Router, Link} from 'react-router-dom';\nimport Home from './pages/Home';\nimport Istruzioni from './pages/Istruzioni';\nimport Game from './pages/Game';\nimport { useEffect, useState } from 'react'\nimport LostPage from './pages/LostPage'\nimport WinPage from './pages/WinPage'\n\n\n\nfunction App() {\n\n  useEffect(() => {\n    \n  },[]);\n\n  return (\n    <Router>\n      <div className=\"App d-flex align-content-center\">\n        <Route path = \"/\" exact render = {() => <Home />}/>\n        <Route path = \"/istruzioni\" render = {() => <Istruzioni /> }/>\n        <Route path = \"/game\" render = {() => <Game/>}/>\n        <Route path = \"/LostPage\" render = {() => <LostPage/>} />\n        <Route path = \"/WinPage\" render = {() => <WinPage/>} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/components/Startupbtn.js",[],"/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/pages/Home.js",[],"/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/pages/Istruzioni.js",[],"/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/pages/Game.js",["50"],"import React from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport { useEffect, useState } from 'react'\nimport Infographic from '../components/Infographic'\nimport \"../styles/Startupbtn.css\"\n\n/* PAGINE GAME\nCarica quando il quiz viene avviato.\nComprende l'infographic ('./components/Infographic.js') e le domande con risposte */\n\nconst Game = () => {\n\n    const history = useHistory()\n\n    //Stati utilizzati\n\n    const[numeroDomanda, setNumeroDomanda] = useState(0);\n    const [time, setTime] = useState(21)\n    const[questions, setQuestions] = useState(null)\n    const[answers, setAnswers] = useState(null)\n    \n    \n    useEffect(() => {\n        //Timer tramite setInterval\n        const interval = setInterval(() => {\n            //Funzione per update tempo\n            updateTime();\n        }, 1000);\n        \n        /*Il tempo è settato a 21 inizialmente e settato manualmente\n        a 20 per evitare che le domande vengano ricaricate tramite\n        la funzione getQuestions*/\n        if(time === 21){\n            setTime(20)\n            getQuestions();\n        }\n        \n        /*pop listener per evitare comportamenti indesiderati con\n        il tasto back*/\n        window.addEventListener(\"popstate\", () => {\n            history.push(\"/\");\n        });\n\n        return () => {\n          clearInterval(interval);\n        };\n      }, [time])\n\n    //Funzione per mescolare un array\n    function shuffleArray(array) {\n        let i = array.length - 1;\n        for (; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          const temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n        }\n    return array;\n    }\n\n    /*funzione per fetchare domande,\n     risposte etc da open trivia database*/\n    const getQuestions = async () => {\n        const response = await fetch(`https://opentdb.com/api.php?amount=10&category=18&difficulty=medium&type=multiple`);\n        const questionsData = await response.json()\n        setQuestions(questionsData.results);\n        //Le risposte sbagliate e quella corretta sono riunite e mescolate in un array\n        setAnswers(questionsData.results.map((data) => shuffleArray(data.incorrect_answers.concat(data.correct_answer))));\n    }\n\n    //Funzione per aggiornare il tempo rimanente\n    function updateTime () {\n        if(time > 0){\n            const newTime = time-1;\n            setTime(newTime);\n        } else {\n            //Se il tempo scende a 0 l'utente perde e viene caricata la pagina relativa\n            history.push(\"/LostPage\")\n        }\n    }\n\n    /*Funzione per scorrere le domande, chiamata quando \n    viene data una domanda giusta*/\n    function progressQuestion(numeroDomanda){\n        setNumeroDomanda(numeroDomanda +1);\n    }\n\n    //funzione chiamata onClick sui bottoni\n    const giveAnswer = (e) => {\n        var givenAnswer = e.target.value;\n        //Se la risposta corrisponde a quella corretta determinata dall'API \n        if (givenAnswer === questions[numeroDomanda].correct_answer){\n            //Se l'utente si trovava all'ultima domanda viene caricata la pagina di vittoria\n            if(numeroDomanda === 9){\n                history.push(\"/WinPage\")\n            } else{\n                //Se la domanda non era l'ultima viene triggerata la funz per scorrere le domande\n                progressQuestion(numeroDomanda);\n                //Il tempo viene resettato a 20\n                setTime(20)\n            }\n        }else{\n            //Se le risposte non corrispondono l'utente viene portato nella pagina sconfitta\n            history.push(\"/LostPage\")\n        }\n    }\n\n    return(\n        <div className=\"section\">\n            \n            {questions && answers && (<div>\n\n            <h1>{time}</h1>\n            <Infographic\n                /*Il numero della domanda viene passato +1 \n                perchè utilizzato come indice dell'array restituito dall'API*/\n                numero = {numeroDomanda + 1}\n            />\n            <h2>{questions[numeroDomanda].question}</h2>\n            <button className = \"smallbtn risp\" onClick={giveAnswer} value={answers[numeroDomanda][0]}>{answers[numeroDomanda][0]}</button>\n            <button className = \"smallbtn risp\" onClick={giveAnswer} value={answers[numeroDomanda][1]}>{answers[numeroDomanda][1]}</button>\n                <br/>\n            <button className = \"smallbtn risp\" onClick={giveAnswer} value={answers[numeroDomanda][2]}>{answers[numeroDomanda][2]}</button>\n            <button className = \"smallbtn risp\" onClick={giveAnswer} value={answers[numeroDomanda][3]}>{answers[numeroDomanda][3]}</button>\n        \n            </div>)}\n\n        </div>\n    )\n}\n\nexport default Game;","/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/components/Infographic.js",[],["51","52"],"/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/pages/LostPage.js",[],"/home/tullio/Desktop/lavoro/VLK/projects/vlkquiz/src/pages/WinPage.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":2,"column":41,"nodeType":"59","messageId":"60","endLine":2,"endColumn":45},{"ruleId":"57","severity":1,"message":"61","line":6,"column":21,"nodeType":"59","messageId":"60","endLine":6,"endColumn":29},{"ruleId":"62","severity":1,"message":"63","line":47,"column":10,"nodeType":"64","endLine":47,"endColumn":16,"suggestions":"65"},{"ruleId":"53","replacedBy":"66"},{"ruleId":"55","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getQuestions', 'history', and 'updateTime'. Either include them or remove the dependency array.","ArrayExpression",["70"],["68"],["69"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [getQuestions, history, time, updateTime]",{"range":"73","text":"74"},[1357,1363],"[getQuestions, history, time, updateTime]"]